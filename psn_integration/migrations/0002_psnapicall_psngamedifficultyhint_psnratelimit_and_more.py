# Generated by Django 5.2.1 on 2025-06-03 12:35

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('psn_integration', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PSNApiCall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_type', models.CharField(choices=[('validate_user', 'User Validation'), ('trophy_summary', 'Trophy Summary'), ('game_list', 'Game List'), ('game_trophies', 'Game Trophies'), ('user_trophies', 'User Game Trophies'), ('trophy_groups', 'Trophy Groups')], max_length=20)),
                ('endpoint', models.URLField(help_text='Full API endpoint called')),
                ('psn_id', models.CharField(blank=True, help_text='PSN ID being queried (if applicable)', max_length=50)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='API call parameters')),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('rate_limited', 'Rate Limited'), ('timeout', 'Timeout')], max_length=20)),
                ('http_status_code', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(help_text='Response time in milliseconds')),
                ('response_size_bytes', models.IntegerField(blank=True, help_text='Size of response in bytes', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_code', models.CharField(blank=True, max_length=50)),
                ('user_agent', models.CharField(blank=True, max_length=200)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'psn_integration_apicall',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PSNGameDifficultyHint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('np_communication_id', models.CharField(help_text='PlayStation game identifier', max_length=50, unique=True)),
                ('game_title', models.CharField(max_length=200)),
                ('completion_rate', models.FloatField(blank=True, help_text='Percentage of players who earned platinum', null=True)),
                ('average_completion_time', models.FloatField(blank=True, help_text='Average time to complete in hours', null=True)),
                ('trophy_rarity_score', models.FloatField(blank=True, help_text='Average rarity of all trophies (0-100)', null=True)),
                ('suggested_multiplier', models.FloatField(default=3.0, help_text='AI/algorithm suggested difficulty multiplier')),
                ('confidence_score', models.FloatField(default=0.0, help_text='Confidence in suggested multiplier (0-1)')),
                ('data_sources', models.JSONField(default=list, help_text='List of sources used for difficulty calculation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'psn_integration_gamedhint',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='PSNRateLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('window_start', models.DateTimeField()),
                ('window_end', models.DateTimeField()),
                ('calls_made', models.IntegerField(default=0)),
                ('calls_limit', models.IntegerField(default=300)),
                ('limit_exceeded', models.BooleanField(default=False)),
                ('reset_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'psn_integration_ratelimit',
                'ordering': ['-window_start'],
            },
        ),
        migrations.CreateModel(
            name='PSNSyncJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('sync_type', models.CharField(choices=[('full', 'Full Sync'), ('incremental', 'Incremental Sync'), ('manual', 'Manual Sync'), ('scheduled', 'Scheduled Sync')], default='manual', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('progress_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('current_task', models.CharField(blank=True, help_text='Current operation being performed', max_length=200)),
                ('games_found', models.IntegerField(default=0, help_text="Number of games found in user's profile")),
                ('games_created', models.IntegerField(default=0, help_text='Number of new games added to database')),
                ('games_updated', models.IntegerField(default=0, help_text='Number of existing games that were updated')),
                ('trophies_synced', models.IntegerField(default=0, help_text='Total number of trophies processed')),
                ('trophies_new', models.IntegerField(default=0, help_text='Number of newly earned trophies found')),
                ('score_before', models.IntegerField(default=0, help_text="User's score before sync")),
                ('score_after', models.IntegerField(default=0, help_text="User's score after sync")),
                ('level_before', models.IntegerField(default=1, help_text="User's level before sync")),
                ('level_after', models.IntegerField(default=1, help_text="User's level after sync")),
                ('errors_count', models.IntegerField(default=0, help_text='Number of errors encountered during sync')),
                ('error_message', models.TextField(blank=True, help_text='Details of any errors that occurred')),
                ('warnings', models.JSONField(blank=True, default=list, help_text='Non-fatal warnings during sync')),
                ('api_calls_made', models.IntegerField(default=0, help_text='Number of PSN API calls made during sync')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'psn_integration_syncjob',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PSNUserValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('psn_id', models.CharField(help_text='PlayStation Network ID', max_length=50, unique=True)),
                ('validation_status', models.CharField(choices=[('valid', 'Valid and Public'), ('private', 'Valid but Private'), ('not_found', 'Not Found'), ('error', 'Validation Error')], default='error', max_length=20)),
                ('is_valid', models.BooleanField(default=False, help_text='Whether PSN ID exists and is accessible')),
                ('is_public', models.BooleanField(default=False, help_text='Whether profile is set to public')),
                ('psn_account_id', models.CharField(blank=True, help_text='Internal PSN account ID', max_length=100, null=True)),
                ('display_name', models.CharField(blank=True, help_text='Display name from PSN profile', max_length=100)),
                ('avatar_url', models.URLField(blank=True, help_text="URL to user's PSN avatar")),
                ('trophy_level', models.IntegerField(blank=True, help_text="User's current PSN trophy level", null=True)),
                ('total_trophies', models.JSONField(blank=True, default=dict, help_text='Trophy counts by type: {bronze: 0, silver: 0, gold: 0, platinum: 0}')),
                ('trophy_points', models.IntegerField(blank=True, help_text='Official PSN trophy points', null=True)),
                ('last_checked', models.DateTimeField(auto_now=True)),
                ('check_count', models.IntegerField(default=1, help_text='Number of times this PSN ID has been validated')),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_error', models.TextField(blank=True, help_text='Last error message encountered during validation')),
                ('consecutive_errors', models.IntegerField(default=0, help_text='Number of consecutive validation errors')),
                ('avg_response_time', models.FloatField(blank=True, help_text='Average API response time for this PSN ID', null=True)),
            ],
            options={
                'db_table': 'psn_integration_uservalidation',
                'ordering': ['-last_checked'],
            },
        ),
        migrations.RemoveField(
            model_name='psnsynclog',
            name='user',
        ),
        migrations.AlterModelOptions(
            name='psntoken',
            options={'ordering': ['-created_at']},
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='encrypted_access_token',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='encrypted_refresh_token',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='last_sync',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='psn_avatar_url',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='psn_online_id',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='scope',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='sync_errors',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='token_type',
        ),
        migrations.RemoveField(
            model_name='psntoken',
            name='user',
        ),
        migrations.AddField(
            model_name='psntoken',
            name='access_token',
            field=models.TextField(default='temporary_token_needs_setup', help_text='PSN access token for API calls'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='psntoken',
            name='account_type',
            field=models.CharField(choices=[('dedicated', 'Dedicated Service Account'), ('backup', 'Backup Service Account')], default='dedicated', help_text='Type of PSN account this token belongs to', max_length=20),
        ),
        migrations.AddField(
            model_name='psntoken',
            name='active',
            field=models.BooleanField(default=True, help_text='Whether this token is currently active'),
        ),
        migrations.AddField(
            model_name='psntoken',
            name='api_calls_count',
            field=models.IntegerField(default=0, help_text='Number of API calls made with this token'),
        ),
        migrations.AddField(
            model_name='psntoken',
            name='last_used',
            field=models.DateTimeField(auto_now=True, help_text='Last time this token was used for API calls'),
        ),
        migrations.AddField(
            model_name='psntoken',
            name='psn_username',
            field=models.CharField(blank=True, help_text='PSN username for this account', max_length=50),
        ),
        migrations.AddField(
            model_name='psntoken',
            name='refresh_token',
            field=models.TextField(blank=True, help_text='Refresh token for obtaining new access tokens', null=True),
        ),
        migrations.AlterField(
            model_name='psntoken',
            name='expires_at',
            field=models.DateTimeField(help_text='When this token expires'),
        ),
        migrations.AlterField(
            model_name='psntoken',
            name='psn_account_id',
            field=models.CharField(blank=True, help_text='PSN account ID associated with this token', max_length=100),
        ),
        migrations.AddIndex(
            model_name='psntoken',
            index=models.Index(fields=['account_type', 'active'], name='psn_integra_account_3c8a6a_idx'),
        ),
        migrations.AddIndex(
            model_name='psntoken',
            index=models.Index(fields=['expires_at'], name='psn_integra_expires_e19ad4_idx'),
        ),
        migrations.AlterModelTable(
            name='psntoken',
            table='psn_integration_token',
        ),
        migrations.AddIndex(
            model_name='psnapicall',
            index=models.Index(fields=['call_type', 'timestamp'], name='psn_integra_call_ty_1476a1_idx'),
        ),
        migrations.AddIndex(
            model_name='psnapicall',
            index=models.Index(fields=['status', 'timestamp'], name='psn_integra_status_a99f7d_idx'),
        ),
        migrations.AddIndex(
            model_name='psnapicall',
            index=models.Index(fields=['psn_id', 'timestamp'], name='psn_integra_psn_id_6cec83_idx'),
        ),
        migrations.AddIndex(
            model_name='psnapicall',
            index=models.Index(fields=['timestamp'], name='psn_integra_timesta_3698c4_idx'),
        ),
        migrations.AddField(
            model_name='psnsyncjob',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_jobs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='psnuservalidation',
            index=models.Index(fields=['psn_id'], name='psn_integra_psn_id_a17834_idx'),
        ),
        migrations.AddIndex(
            model_name='psnuservalidation',
            index=models.Index(fields=['validation_status'], name='psn_integra_validat_e8cb6f_idx'),
        ),
        migrations.AddIndex(
            model_name='psnuservalidation',
            index=models.Index(fields=['is_valid', 'is_public'], name='psn_integra_is_vali_d8c138_idx'),
        ),
        migrations.AddIndex(
            model_name='psnuservalidation',
            index=models.Index(fields=['last_checked'], name='psn_integra_last_ch_b4667b_idx'),
        ),
        migrations.DeleteModel(
            name='PSNSyncLog',
        ),
        migrations.AddIndex(
            model_name='psnsyncjob',
            index=models.Index(fields=['user', 'status'], name='psn_integra_user_id_d906e1_idx'),
        ),
        migrations.AddIndex(
            model_name='psnsyncjob',
            index=models.Index(fields=['status', 'created_at'], name='psn_integra_status_4eb3e5_idx'),
        ),
        migrations.AddIndex(
            model_name='psnsyncjob',
            index=models.Index(fields=['job_id'], name='psn_integra_job_id_7616ae_idx'),
        ),
    ]
